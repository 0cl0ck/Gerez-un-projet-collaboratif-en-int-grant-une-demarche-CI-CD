name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
    types: [opened, synchronize, reopened]

jobs:
  test-backend:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'
    
    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
    
    - name: Run backend tests with coverage
      working-directory: ./back
      run: mvn clean verify
    
    - name: Upload backend test results
      uses: actions/upload-artifact@v4
      if: success() || failure()
      with:
        name: backend-test-results
        path: back/target/surefire-reports/TEST-*.xml
    
    - name: Upload backend coverage reports
      uses: actions/upload-artifact@v4
      if: success() || failure()
      with:
        name: backend-coverage
        path: back/target/site/jacoco/

  test-frontend:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '16'
        cache: 'npm'
        cache-dependency-path: ./front/package-lock.json
    
    - name: Install dependencies
      working-directory: ./front
      run: npm ci
    
    - name: Install karma-junit-reporter
      working-directory: ./front
      run: npm install --save-dev karma-junit-reporter
    
    - name: Run frontend tests with coverage
      working-directory: ./front
      run: npm run test -- --no-watch --no-progress --browsers=ChromeHeadless --code-coverage
    
    - name: Upload frontend test results
      uses: actions/upload-artifact@v4
      if: success() || failure()
      with:
        name: frontend-test-results
        path: front/TESTS-*.xml
    
    - name: Upload frontend coverage reports
      uses: actions/upload-artifact@v4
      if: success() || failure()
      with:
        name: frontend-coverage
        path: front/coverage/bobapp/

  sonar-analysis:
    needs: [test-backend, test-frontend]
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
    
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '16'
        cache: 'npm'
        cache-dependency-path: ./front/package-lock.json
    
    - name: Cache SonarQube packages
      uses: actions/cache@v3
      with:
        path: ~/.sonar/cache
        key: ${{ runner.os }}-sonar
        restore-keys: ${{ runner.os }}-sonar
    
    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
    
    - name: Install frontend dependencies
      working-directory: ./front
      run: npm ci
    
    - name: Install karma-junit-reporter
      working-directory: ./front
      run: npm install --save-dev karma-junit-reporter
    
    - name: Build backend
      working-directory: ./back
      run: mvn clean compile
    
    - name: Run backend tests with coverage
      working-directory: ./back
      run: mvn verify
    
    - name: Run frontend tests with coverage
      working-directory: ./front
      run: npm run test -- --no-watch --no-progress --browsers=ChromeHeadless --code-coverage
    
    - name: SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  docker-build-push:
    needs: [test-backend, test-frontend, sonar-analysis]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    
    - name: Extract metadata for backend
      id: meta-backend
      uses: docker/metadata-action@v5
      with:
        images: charlesanderson/bobapp-back
        tags: |
          type=ref,event=branch
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          type=raw,value=1.0.0
    
    - name: Build and push backend Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./back
        push: true
        tags: ${{ steps.meta-backend.outputs.tags }}
        labels: ${{ steps.meta-backend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64
    
    - name: Extract metadata for frontend
      id: meta-frontend
      uses: docker/metadata-action@v5
      with:
        images: charlesanderson/bobapp-front
        tags: |
          type=ref,event=branch
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          type=raw,value=1.0.0
    
    - name: Build and push frontend Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./front
        push: true
        tags: ${{ steps.meta-frontend.outputs.tags }}
        labels: ${{ steps.meta-frontend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64